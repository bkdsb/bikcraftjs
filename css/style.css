/* OPEN CSS RESET */

body {
  margin: 0px;
  font-family: Arial, Helvetica, sans-serif;
  height: 2000px;
}

h1,
ul,
p {
  margin: 0px;
}

ul {
  padding: 0px;
  list-style: none;
}

a {
  text-decoration: none;
  color: inherit;
}

img {
  max-width: 100%;
  display: block;
}

/* CLOSE CSS RESET */

.header-bg {
  background-color: #000000;
}

/* Como eu quero marca de um lado e o menu do outro,
como tenho a div com a class header, definir como grid ou flex, nesse caso o flex funciona melhor 
#DISPLAY: GRID;
#DISPLAY: FLEX;
*/

/* Um item numa ponta e o outro na outra 
  #JUSTIFY-CONTENT: SPACE-BETWEEN;*/

/* Para alinhar os itens ao centro um do outro
  #ALIGN-ITEMS: CENTER;
   */

/* Para alinhar o conteúdo sempre ao centro
#MARGIN-LEFT & MARGIN-RIGHT: AUTO; */

/* Para o display se ajustar a tela, descer uma linha, é definido o
#FLEX-WRAP: WRAP; */

.header {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
  justify-content: space-between;
  align-items: center;
  box-sizing: border-box;
  padding: 20px;
  max-width: 1200px;
  margin-left: auto;
  margin-right: auto;
}

/* Para falar com o menu, e como são LI'S tenho que falar com o UL */

/* Para colocar um do lado do outro, como antes 
#DISPLAY-FLEX */

/* Como o header-menu é outro item flex, ele também necessita de 
#FLEX-WRAP: WRAP; */

.header-menu {
  display: flex;
  flex-wrap: wrap;
  gap: 40px;
}

/* Definindo como display: inline-block, porque se esse item cair um embaixo do outro o padding não funcionaria corretamente, por padrão o 'a' é inline */

.header-menu a {
  color: #ffffff;
  display: inline-block;
  padding: 16px 0;
  font-size: 18px;
  position: relative;
}

/* Quero um elemento abaixo dos 'a', como é depois, então usa-se o pseudo element 
#::AFTER */

/* Sempre se põe content vazio e display: block */

/* Como esse elemento tem agora 6px após o conteúdo, ele nao está mais alinhado ao logo/marca */

/* Tiro ele do fluxo então com
#POSITION: ABSOLUTE; */

/* Outro problema agora, como foi definido absolute passa a ser relacionado ao elemento pai, que seria o body por não ter nenhum outro com position: relative;

Para resolver, basta definir o 'a' como relative */

.header-menu a::after {
  content: "";
  display: block;
  height: 2px;
  width: 0px;
  background: #ffffff;
  margin-top: 4px;
  transition: .3s;
  position: absolute;
}

/* Quando passar o mouse por cima, então vou querer que o after funcione */


.header-menu a:hover:after {
  width: 100%;
}

/* Para resolver as quebras no site, usa-se media queries */

/* Diminuido o gap, tornando os botões visíveis para mobile */

@media (max-width: 800px) {
  .header-menu {
    gap: 20px;
  }

  .header-menu a {
    background: #111111;
    padding: 12px 16px;
    border-radius: 4px;
  }

  .header-menu a:hover {
    background-color: #2e2e2e;
  }

  .header a:after {
    display: none;
  }
}

/* Nunca se coloca um valor exato de quebra, sempre a mais */

@media (max-width: 600px) {
  .header-menu {
    gap: 12px;
  }

  .header-menu a {
    padding: 8px 12px;
    font-size: 14px;
  }
}

/* Lembrar de resetar h1, h2, p, que por padrão vem com margin, isso pode quebrar/vazar os containers */

/* Como é o introdução-bg que está envolvendo o conteúdo, e eu quero criar o efeito de imagem sobressaindo, basta criar um box-shadow nela */

/* A sombra faz parecer que os conteúdos estão vazando, para corrigir é só compensar o padding na introducao-conteudo com o valor positivo */

.introducao-bg {
  background: #000000;
  color: #ffffff;
  box-shadow: inset 0 -120px #ffffff;
}

/* Como os itens estão divididos por colunas, coloco como
#DISPLAY: GRID; */

/* Para dar espaçamento entre os itens somente horizontalmente usa-se
#GAP: 0PX 40PX */

/* Como a intro também esta dentro do container, também é necessário definir aqui */

.introducao {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 0px 40px;
  box-sizing: border-box;
  max-width: 1200px;
  padding-left: 20px;
  padding-right: 20px;
  margin-left: auto;
  margin-right: auto;
}

/* Para resolver problemas de alinhamento, geralmente se usa uma div para separar os conteúdos */

/* Para alinhar o conteudo embaixo, usa-se
#ALIGN-SELF: END; */

.introducao-conteudo {
  align-self: end;
  padding-bottom: 200px;
}

/* Não é recomendado usar img dentro de um grid, sempre se comporta de maneiras diferentes, melhor envolve-la numa div */

/* .introducao-imagem {
  margin-bottom: -120px;
} */

/* A imagem cresce 100% porém a div fica -120px do container 
o que pode gerar problema com o próximo conteúdo que vier estando por cima dele */

.introducao img {
  height: 100%;
  object-fit: cover;
}


.introducao h1 {
  margin-bottom: 32px;
  font-size: 64px;
  line-height: 1.125;
}

/* Como foi definido que os pontos seriam amarelos, é necessários que estejam dentro de uma tag */

.introducao h1 span {
  color: #FFBF00;
}

.introducao p {
  margin-bottom: 20px;
  font-size: 24px;
  line-height: 1.5;
  color: #b2b2b2;
}

/* Por padrão o a é inline, então foi mudado para inline-block, mais uma vez */

.introducao a {
  display: inline-block;
  padding: 16px 32px;
  background: linear-gradient(#FFBF00, #F2A50C);
  ;
  border-radius: 4px;
  box-shadow: 0 1px 2px 0 rgba(0, 0, 0, 0.1);
  text-transform: uppercase;
  color: #332200;
  font-size: 18px;
  line-height: 1.33;
  font-weight: bold;
}

.introducao a:hover {
  background: linear-gradient(#ffb60d, #E59317);
}